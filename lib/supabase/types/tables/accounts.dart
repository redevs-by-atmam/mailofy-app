//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Accounts Table
class AccountsTable extends SupabaseTable<AccountsRow> {
  /// Table Name
  @override
  String get tableName => 'accounts';

  /// Create a [AccountsRow] from the [data] provided
  @override
  AccountsRow createRow(Map<String, dynamic> data) =>
      AccountsRow.fromJson(data);
}

/// Accounts Row
class AccountsRow extends SupabaseDataRow {
  /// Accounts Row
  AccountsRow({
    String? id,
    String? uid,
    String? email,
    String? password,
    String? smtpServer,
    int? smtpPort,
    int? mailLeft,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? connectionStatus,
    String? smtpHost,
    bool? useSsl,
    int? dailyMailLimit,
    String? oauthProvider,
    String? oauthClientId,
    String? oauthClientSecret,
    String? oauthRefreshToken,
    String? oauthAccessToken,
    String? oauthExpiryDate,
    Map<String, dynamic>? oauthUser,
    DateTime? lastUsedAt,
  }) : super({
         if (id != null) 'id': supaSerialize(id),
         if (uid != null) 'uid': supaSerialize(uid),
         if (email != null) 'email': supaSerialize(email),
         if (password != null) 'password': supaSerialize(password),
         if (smtpServer != null) 'smtp_server': supaSerialize(smtpServer),
         if (smtpPort != null) 'smtp_port': supaSerialize(smtpPort),
         if (mailLeft != null) 'mail_left': supaSerialize(mailLeft),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
         if (connectionStatus != null)
           'connection_status': supaSerialize(connectionStatus),
         if (smtpHost != null) 'smtp_host': supaSerialize(smtpHost),
         if (useSsl != null) 'use_ssl': supaSerialize(useSsl),
         if (dailyMailLimit != null)
           'daily_mail_limit': supaSerialize(dailyMailLimit),
         if (oauthProvider != null)
           'oauth_provider': supaSerialize(oauthProvider),
         if (oauthClientId != null)
           'oauth_client_id': supaSerialize(oauthClientId),
         if (oauthClientSecret != null)
           'oauth_client_secret': supaSerialize(oauthClientSecret),
         if (oauthRefreshToken != null)
           'oauth_refresh_token': supaSerialize(oauthRefreshToken),
         if (oauthAccessToken != null)
           'oauth_access_token': supaSerialize(oauthAccessToken),
         if (oauthExpiryDate != null)
           'oauth_expiry_date': supaSerialize(oauthExpiryDate),
         if (oauthUser != null) 'oauth_user': supaSerialize(oauthUser),
         if (lastUsedAt != null) 'last_used_at': supaSerialize(lastUsedAt),
       });

  /// Accounts Row
  const AccountsRow._(super.data);

  /// Create Accounts Row from a [data] map
  factory AccountsRow.fromJson(Map<String, dynamic> data) =>
      AccountsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => AccountsTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField, defaultValue: '')!;
  set id(String value) => setField<String>(idField, value);

  /// Uid field name
  static const String uidField = 'uid';

  /// Uid
  String get uid => getField<String>(uidField, defaultValue: 'auth.')!;
  set uid(String value) => setField<String>(uidField, value);

  /// Email field name
  static const String emailField = 'email';

  /// Email
  String? get email => getField<String>(emailField);
  set email(String? value) => setField<String>(emailField, value);

  /// Password field name
  static const String passwordField = 'password';

  /// Password
  String? get password => getField<String>(passwordField);
  set password(String? value) => setField<String>(passwordField, value);

  /// Smtp Server field name
  static const String smtpServerField = 'smtp_server';

  /// Smtp Server
  String? get smtpServer => getField<String>(smtpServerField);
  set smtpServer(String? value) => setField<String>(smtpServerField, value);

  /// Smtp Port field name
  static const String smtpPortField = 'smtp_port';

  /// Smtp Port
  int? get smtpPort => getField<int>(smtpPortField);
  set smtpPort(int? value) => setField<int>(smtpPortField, value);

  /// Mail Left field name
  static const String mailLeftField = 'mail_left';

  /// Mail Left
  int? get mailLeft => getField<int>(mailLeftField);
  set mailLeft(int? value) => setField<int>(mailLeftField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime get updatedAt =>
      getField<DateTime>(updatedAtField, defaultValue: DateTime.now())!;
  set updatedAt(DateTime value) => setField<DateTime>(updatedAtField, value);

  /// Connection Status field name
  static const String connectionStatusField = 'connection_status';

  /// Connection Status
  String? get connectionStatus => getField<String>(connectionStatusField);
  set connectionStatus(String? value) =>
      setField<String>(connectionStatusField, value);

  /// Smtp Host field name
  static const String smtpHostField = 'smtp_host';

  /// Smtp Host
  String? get smtpHost => getField<String>(smtpHostField);
  set smtpHost(String? value) => setField<String>(smtpHostField, value);

  /// Use Ssl field name
  static const String useSslField = 'use_ssl';

  /// Use Ssl
  bool? get useSsl => getField<bool>(useSslField);
  set useSsl(bool? value) => setField<bool>(useSslField, value);

  /// Daily Mail Limit field name
  static const String dailyMailLimitField = 'daily_mail_limit';

  /// Daily Mail Limit
  int? get dailyMailLimit => getField<int>(dailyMailLimitField);
  set dailyMailLimit(int? value) => setField<int>(dailyMailLimitField, value);

  /// Oauth Provider field name
  static const String oauthProviderField = 'oauth_provider';

  /// Oauth Provider
  String? get oauthProvider => getField<String>(oauthProviderField);
  set oauthProvider(String? value) =>
      setField<String>(oauthProviderField, value);

  /// Oauth Client Id field name
  static const String oauthClientIdField = 'oauth_client_id';

  /// Oauth Client Id
  String? get oauthClientId => getField<String>(oauthClientIdField);
  set oauthClientId(String? value) =>
      setField<String>(oauthClientIdField, value);

  /// Oauth Client Secret field name
  static const String oauthClientSecretField = 'oauth_client_secret';

  /// Oauth Client Secret
  String? get oauthClientSecret => getField<String>(oauthClientSecretField);
  set oauthClientSecret(String? value) =>
      setField<String>(oauthClientSecretField, value);

  /// Oauth Refresh Token field name
  static const String oauthRefreshTokenField = 'oauth_refresh_token';

  /// Oauth Refresh Token
  String? get oauthRefreshToken => getField<String>(oauthRefreshTokenField);
  set oauthRefreshToken(String? value) =>
      setField<String>(oauthRefreshTokenField, value);

  /// Oauth Access Token field name
  static const String oauthAccessTokenField = 'oauth_access_token';

  /// Oauth Access Token
  String? get oauthAccessToken => getField<String>(oauthAccessTokenField);
  set oauthAccessToken(String? value) =>
      setField<String>(oauthAccessTokenField, value);

  /// Oauth Expiry Date field name
  static const String oauthExpiryDateField = 'oauth_expiry_date';

  /// Oauth Expiry Date
  String? get oauthExpiryDate => getField<String>(oauthExpiryDateField);
  set oauthExpiryDate(String? value) =>
      setField<String>(oauthExpiryDateField, value);

  /// Oauth User field name
  static const String oauthUserField = 'oauth_user';

  /// Oauth User
  Map<String, dynamic>? get oauthUser =>
      getField<Map<String, dynamic>>(oauthUserField);
  set oauthUser(Map<String, dynamic>? value) =>
      setField<Map<String, dynamic>>(oauthUserField, value);

  /// Last Used At field name
  static const String lastUsedAtField = 'last_used_at';

  /// Last Used At
  DateTime? get lastUsedAt => getField<DateTime>(lastUsedAtField);
  set lastUsedAt(DateTime? value) => setField<DateTime>(lastUsedAtField, value);

  /// Make a copy of the current [AccountsRow]
  /// overriding the provided fields
  AccountsRow copyWith({
    String? id,
    String? uid,
    String? email,
    String? password,
    String? smtpServer,
    int? smtpPort,
    int? mailLeft,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? connectionStatus,
    String? smtpHost,
    bool? useSsl,
    int? dailyMailLimit,
    String? oauthProvider,
    String? oauthClientId,
    String? oauthClientSecret,
    String? oauthRefreshToken,
    String? oauthAccessToken,
    String? oauthExpiryDate,
    Map<String, dynamic>? oauthUser,
    DateTime? lastUsedAt,
  }) => AccountsRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'uid': supaSerialize(uid) ?? data['uid'],
    'email': supaSerialize(email) ?? data['email'],
    'password': supaSerialize(password) ?? data['password'],
    'smtp_server': supaSerialize(smtpServer) ?? data['smtp_server'],
    'smtp_port': supaSerialize(smtpPort) ?? data['smtp_port'],
    'mail_left': supaSerialize(mailLeft) ?? data['mail_left'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
    'connection_status':
        supaSerialize(connectionStatus) ?? data['connection_status'],
    'smtp_host': supaSerialize(smtpHost) ?? data['smtp_host'],
    'use_ssl': supaSerialize(useSsl) ?? data['use_ssl'],
    'daily_mail_limit':
        supaSerialize(dailyMailLimit) ?? data['daily_mail_limit'],
    'oauth_provider': supaSerialize(oauthProvider) ?? data['oauth_provider'],
    'oauth_client_id': supaSerialize(oauthClientId) ?? data['oauth_client_id'],
    'oauth_client_secret':
        supaSerialize(oauthClientSecret) ?? data['oauth_client_secret'],
    'oauth_refresh_token':
        supaSerialize(oauthRefreshToken) ?? data['oauth_refresh_token'],
    'oauth_access_token':
        supaSerialize(oauthAccessToken) ?? data['oauth_access_token'],
    'oauth_expiry_date':
        supaSerialize(oauthExpiryDate) ?? data['oauth_expiry_date'],
    'oauth_user': supaSerialize(oauthUser) ?? data['oauth_user'],
    'last_used_at': supaSerialize(lastUsedAt) ?? data['last_used_at'],
  });
}

/// Date: 2025-08-08 19:06:35.274989
