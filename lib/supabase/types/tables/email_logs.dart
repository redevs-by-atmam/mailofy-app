//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Email Logs Table
class EmailLogsTable extends SupabaseTable<EmailLogsRow> {
  /// Table Name
  @override
  String get tableName => 'email_logs';

  /// Create a [EmailLogsRow] from the [data] provided
  @override
  EmailLogsRow createRow(Map<String, dynamic> data) =>
      EmailLogsRow.fromJson(data);
}

/// Email Logs Row
class EmailLogsRow extends SupabaseDataRow {
  /// Email Logs Row
  EmailLogsRow({
    String? id,
    String? campaignRunId,
    String? recipientId,
    EmailLogStatus? status,
    DateTime? sentAt,
    DateTime? failedAt,
    DateTime? openedAt,
    DateTime? clickedAt,
    DateTime? unsubscribedAt,
    int? retryCount,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? uid,
    String? campaignId,
    String? accountId,
  }) : super({
         if (id != null) 'id': supaSerialize(id),
         if (campaignRunId != null)
           'campaign_run_id': supaSerialize(campaignRunId),
         if (recipientId != null) 'recipient_id': supaSerialize(recipientId),
         if (status != null) 'status': supaSerialize(status),
         if (sentAt != null) 'sent_at': supaSerialize(sentAt),
         if (failedAt != null) 'failed_at': supaSerialize(failedAt),
         if (openedAt != null) 'opened_at': supaSerialize(openedAt),
         if (clickedAt != null) 'clicked_at': supaSerialize(clickedAt),
         if (unsubscribedAt != null)
           'unsubscribed_at': supaSerialize(unsubscribedAt),
         if (retryCount != null) 'retry_count': supaSerialize(retryCount),
         if (errorMessage != null) 'error_message': supaSerialize(errorMessage),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
         if (uid != null) 'uid': supaSerialize(uid),
         if (campaignId != null) 'campaign_id': supaSerialize(campaignId),
         if (accountId != null) 'account_id': supaSerialize(accountId),
       });

  /// Email Logs Row
  const EmailLogsRow._(super.data);

  /// Create Email Logs Row from a [data] map
  factory EmailLogsRow.fromJson(Map<String, dynamic> data) =>
      EmailLogsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => EmailLogsTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField, defaultValue: '')!;
  set id(String value) => setField<String>(idField, value);

  /// Campaign Run Id field name
  static const String campaignRunIdField = 'campaign_run_id';

  /// Campaign Run Id
  String? get campaignRunId => getField<String>(campaignRunIdField);
  set campaignRunId(String? value) =>
      setField<String>(campaignRunIdField, value);

  /// Recipient Id field name
  static const String recipientIdField = 'recipient_id';

  /// Recipient Id
  String? get recipientId => getField<String>(recipientIdField);
  set recipientId(String? value) => setField<String>(recipientIdField, value);

  /// Status field name
  static const String statusField = 'status';

  /// Status
  EmailLogStatus? get status =>
      getField<EmailLogStatus>(statusField, enumValues: EmailLogStatus.values);
  set status(EmailLogStatus? value) =>
      setField<EmailLogStatus>(statusField, value);

  /// Sent At field name
  static const String sentAtField = 'sent_at';

  /// Sent At
  DateTime? get sentAt => getField<DateTime>(sentAtField);
  set sentAt(DateTime? value) => setField<DateTime>(sentAtField, value);

  /// Failed At field name
  static const String failedAtField = 'failed_at';

  /// Failed At
  DateTime? get failedAt => getField<DateTime>(failedAtField);
  set failedAt(DateTime? value) => setField<DateTime>(failedAtField, value);

  /// Opened At field name
  static const String openedAtField = 'opened_at';

  /// Opened At
  DateTime? get openedAt => getField<DateTime>(openedAtField);
  set openedAt(DateTime? value) => setField<DateTime>(openedAtField, value);

  /// Clicked At field name
  static const String clickedAtField = 'clicked_at';

  /// Clicked At
  DateTime? get clickedAt => getField<DateTime>(clickedAtField);
  set clickedAt(DateTime? value) => setField<DateTime>(clickedAtField, value);

  /// Unsubscribed At field name
  static const String unsubscribedAtField = 'unsubscribed_at';

  /// Unsubscribed At
  DateTime? get unsubscribedAt => getField<DateTime>(unsubscribedAtField);
  set unsubscribedAt(DateTime? value) =>
      setField<DateTime>(unsubscribedAtField, value);

  /// Retry Count field name
  static const String retryCountField = 'retry_count';

  /// Retry Count
  int? get retryCount => getField<int>(retryCountField);
  set retryCount(int? value) => setField<int>(retryCountField, value);

  /// Error Message field name
  static const String errorMessageField = 'error_message';

  /// Error Message
  String? get errorMessage => getField<String>(errorMessageField);
  set errorMessage(String? value) => setField<String>(errorMessageField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime? get updatedAt => getField<DateTime>(updatedAtField);
  set updatedAt(DateTime? value) => setField<DateTime>(updatedAtField, value);

  /// Uid field name
  static const String uidField = 'uid';

  /// Uid
  String get uid => getField<String>(uidField, defaultValue: 'auth.')!;
  set uid(String value) => setField<String>(uidField, value);

  /// Campaign Id field name
  static const String campaignIdField = 'campaign_id';

  /// Campaign Id
  String? get campaignId => getField<String>(campaignIdField);
  set campaignId(String? value) => setField<String>(campaignIdField, value);

  /// Account Id field name
  static const String accountIdField = 'account_id';

  /// Account Id
  String? get accountId => getField<String>(accountIdField);
  set accountId(String? value) => setField<String>(accountIdField, value);

  /// Make a copy of the current [EmailLogsRow]
  /// overriding the provided fields
  EmailLogsRow copyWith({
    String? id,
    String? campaignRunId,
    String? recipientId,
    EmailLogStatus? status,
    DateTime? sentAt,
    DateTime? failedAt,
    DateTime? openedAt,
    DateTime? clickedAt,
    DateTime? unsubscribedAt,
    int? retryCount,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? uid,
    String? campaignId,
    String? accountId,
  }) => EmailLogsRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'campaign_run_id': supaSerialize(campaignRunId) ?? data['campaign_run_id'],
    'recipient_id': supaSerialize(recipientId) ?? data['recipient_id'],
    'status': supaSerialize(status) ?? data['status'],
    'sent_at': supaSerialize(sentAt) ?? data['sent_at'],
    'failed_at': supaSerialize(failedAt) ?? data['failed_at'],
    'opened_at': supaSerialize(openedAt) ?? data['opened_at'],
    'clicked_at': supaSerialize(clickedAt) ?? data['clicked_at'],
    'unsubscribed_at': supaSerialize(unsubscribedAt) ?? data['unsubscribed_at'],
    'retry_count': supaSerialize(retryCount) ?? data['retry_count'],
    'error_message': supaSerialize(errorMessage) ?? data['error_message'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
    'uid': supaSerialize(uid) ?? data['uid'],
    'campaign_id': supaSerialize(campaignId) ?? data['campaign_id'],
    'account_id': supaSerialize(accountId) ?? data['account_id'],
  });
}

/// Date: 2025-08-08 19:06:35.305857
