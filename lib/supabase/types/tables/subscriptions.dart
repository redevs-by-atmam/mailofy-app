//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Subscriptions Table
class SubscriptionsTable extends SupabaseTable<SubscriptionsRow> {
  /// Table Name
  @override
  String get tableName => 'subscriptions';

  /// Create a [SubscriptionsRow] from the [data] provided
  @override
  SubscriptionsRow createRow(Map<String, dynamic> data) =>
      SubscriptionsRow.fromJson(data);
}

/// Subscriptions Row
class SubscriptionsRow extends SupabaseDataRow {
  /// Subscriptions Row
  SubscriptionsRow({
    required String id,
    String? uid,
    SubscriptionStatus? status,
    String? planId,
    String? entity,
    DateTime? currentStart,
    DateTime? currentEnd,
    DateTime? endedAt,
    DateTime? chargeAt,
    DateTime? startAt,
    DateTime? endAt,
    int? authAttempts,
    int? paidCount,
    DateTime? createdAt,
    String? shortUrl,
    bool? hasScheduledChanges,
    DateTime? changeScheduledAt,
    String? source,
    String? remainingCount,
    String? customerId,
    String? paymentMethod,
  }) : super({
         'id': supaSerialize(id),
         if (uid != null) 'uid': supaSerialize(uid),
         if (status != null) 'status': supaSerialize(status),
         if (planId != null) 'plan_id': supaSerialize(planId),
         if (entity != null) 'entity': supaSerialize(entity),
         if (currentStart != null) 'current_start': supaSerialize(currentStart),
         if (currentEnd != null) 'current_end': supaSerialize(currentEnd),
         if (endedAt != null) 'ended_at': supaSerialize(endedAt),
         if (chargeAt != null) 'charge_at': supaSerialize(chargeAt),
         if (startAt != null) 'start_at': supaSerialize(startAt),
         if (endAt != null) 'end_at': supaSerialize(endAt),
         if (authAttempts != null) 'auth_attempts': supaSerialize(authAttempts),
         if (paidCount != null) 'paid_count': supaSerialize(paidCount),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (shortUrl != null) 'short_url': supaSerialize(shortUrl),
         if (hasScheduledChanges != null)
           'has_scheduled_changes': supaSerialize(hasScheduledChanges),
         if (changeScheduledAt != null)
           'change_scheduled_at': supaSerialize(changeScheduledAt),
         if (source != null) 'source': supaSerialize(source),
         if (remainingCount != null)
           'remaining_count': supaSerialize(remainingCount),
         if (customerId != null) 'customer_id': supaSerialize(customerId),
         if (paymentMethod != null)
           'payment_method': supaSerialize(paymentMethod),
       });

  /// Subscriptions Row
  const SubscriptionsRow._(super.data);

  /// Create Subscriptions Row from a [data] map
  factory SubscriptionsRow.fromJson(Map<String, dynamic> data) =>
      SubscriptionsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => SubscriptionsTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField)!;
  set id(String value) => setField<String>(idField, value);

  /// Uid field name
  static const String uidField = 'uid';

  /// Uid
  String get uid => getField<String>(uidField, defaultValue: 'auth.')!;
  set uid(String value) => setField<String>(uidField, value);

  /// Status field name
  static const String statusField = 'status';

  /// Status
  SubscriptionStatus? get status => getField<SubscriptionStatus>(
    statusField,
    enumValues: SubscriptionStatus.values,
  );
  set status(SubscriptionStatus? value) =>
      setField<SubscriptionStatus>(statusField, value);

  /// Plan Id field name
  static const String planIdField = 'plan_id';

  /// Plan Id
  String? get planId => getField<String>(planIdField);
  set planId(String? value) => setField<String>(planIdField, value);

  /// Entity field name
  static const String entityField = 'entity';

  /// Entity
  String? get entity => getField<String>(entityField);
  set entity(String? value) => setField<String>(entityField, value);

  /// Current Start field name
  static const String currentStartField = 'current_start';

  /// Current Start
  DateTime? get currentStart => getField<DateTime>(currentStartField);
  set currentStart(DateTime? value) =>
      setField<DateTime>(currentStartField, value);

  /// Current End field name
  static const String currentEndField = 'current_end';

  /// Current End
  DateTime? get currentEnd => getField<DateTime>(currentEndField);
  set currentEnd(DateTime? value) => setField<DateTime>(currentEndField, value);

  /// Ended At field name
  static const String endedAtField = 'ended_at';

  /// Ended At
  DateTime? get endedAt => getField<DateTime>(endedAtField);
  set endedAt(DateTime? value) => setField<DateTime>(endedAtField, value);

  /// Charge At field name
  static const String chargeAtField = 'charge_at';

  /// Charge At
  DateTime? get chargeAt => getField<DateTime>(chargeAtField);
  set chargeAt(DateTime? value) => setField<DateTime>(chargeAtField, value);

  /// Start At field name
  static const String startAtField = 'start_at';

  /// Start At
  DateTime? get startAt => getField<DateTime>(startAtField);
  set startAt(DateTime? value) => setField<DateTime>(startAtField, value);

  /// End At field name
  static const String endAtField = 'end_at';

  /// End At
  DateTime? get endAt => getField<DateTime>(endAtField);
  set endAt(DateTime? value) => setField<DateTime>(endAtField, value);

  /// Auth Attempts field name
  static const String authAttemptsField = 'auth_attempts';

  /// Auth Attempts
  int? get authAttempts => getField<int>(authAttemptsField);
  set authAttempts(int? value) => setField<int>(authAttemptsField, value);

  /// Paid Count field name
  static const String paidCountField = 'paid_count';

  /// Paid Count
  int? get paidCount => getField<int>(paidCountField);
  set paidCount(int? value) => setField<int>(paidCountField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime? get createdAt => getField<DateTime>(createdAtField);
  set createdAt(DateTime? value) => setField<DateTime>(createdAtField, value);

  /// Short Url field name
  static const String shortUrlField = 'short_url';

  /// Short Url
  String? get shortUrl => getField<String>(shortUrlField);
  set shortUrl(String? value) => setField<String>(shortUrlField, value);

  /// Has Scheduled Changes field name
  static const String hasScheduledChangesField = 'has_scheduled_changes';

  /// Has Scheduled Changes
  bool? get hasScheduledChanges => getField<bool>(hasScheduledChangesField);
  set hasScheduledChanges(bool? value) =>
      setField<bool>(hasScheduledChangesField, value);

  /// Change Scheduled At field name
  static const String changeScheduledAtField = 'change_scheduled_at';

  /// Change Scheduled At
  DateTime? get changeScheduledAt => getField<DateTime>(changeScheduledAtField);
  set changeScheduledAt(DateTime? value) =>
      setField<DateTime>(changeScheduledAtField, value);

  /// Source field name
  static const String sourceField = 'source';

  /// Source
  String? get source => getField<String>(sourceField);
  set source(String? value) => setField<String>(sourceField, value);

  /// Remaining Count field name
  static const String remainingCountField = 'remaining_count';

  /// Remaining Count
  String? get remainingCount => getField<String>(remainingCountField);
  set remainingCount(String? value) =>
      setField<String>(remainingCountField, value);

  /// Customer Id field name
  static const String customerIdField = 'customer_id';

  /// Customer Id
  String? get customerId => getField<String>(customerIdField);
  set customerId(String? value) => setField<String>(customerIdField, value);

  /// Payment Method field name
  static const String paymentMethodField = 'payment_method';

  /// Payment Method
  String? get paymentMethod => getField<String>(paymentMethodField);
  set paymentMethod(String? value) =>
      setField<String>(paymentMethodField, value);

  /// Make a copy of the current [SubscriptionsRow]
  /// overriding the provided fields
  SubscriptionsRow copyWith({
    String? id,
    String? uid,
    SubscriptionStatus? status,
    String? planId,
    String? entity,
    DateTime? currentStart,
    DateTime? currentEnd,
    DateTime? endedAt,
    DateTime? chargeAt,
    DateTime? startAt,
    DateTime? endAt,
    int? authAttempts,
    int? paidCount,
    DateTime? createdAt,
    String? shortUrl,
    bool? hasScheduledChanges,
    DateTime? changeScheduledAt,
    String? source,
    String? remainingCount,
    String? customerId,
    String? paymentMethod,
  }) => SubscriptionsRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'uid': supaSerialize(uid) ?? data['uid'],
    'status': supaSerialize(status) ?? data['status'],
    'plan_id': supaSerialize(planId) ?? data['plan_id'],
    'entity': supaSerialize(entity) ?? data['entity'],
    'current_start': supaSerialize(currentStart) ?? data['current_start'],
    'current_end': supaSerialize(currentEnd) ?? data['current_end'],
    'ended_at': supaSerialize(endedAt) ?? data['ended_at'],
    'charge_at': supaSerialize(chargeAt) ?? data['charge_at'],
    'start_at': supaSerialize(startAt) ?? data['start_at'],
    'end_at': supaSerialize(endAt) ?? data['end_at'],
    'auth_attempts': supaSerialize(authAttempts) ?? data['auth_attempts'],
    'paid_count': supaSerialize(paidCount) ?? data['paid_count'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'short_url': supaSerialize(shortUrl) ?? data['short_url'],
    'has_scheduled_changes':
        supaSerialize(hasScheduledChanges) ?? data['has_scheduled_changes'],
    'change_scheduled_at':
        supaSerialize(changeScheduledAt) ?? data['change_scheduled_at'],
    'source': supaSerialize(source) ?? data['source'],
    'remaining_count': supaSerialize(remainingCount) ?? data['remaining_count'],
    'customer_id': supaSerialize(customerId) ?? data['customer_id'],
    'payment_method': supaSerialize(paymentMethod) ?? data['payment_method'],
  });
}

/// Date: 2025-08-08 19:06:35.333531
