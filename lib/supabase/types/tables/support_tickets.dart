//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Support Tickets Table
class SupportTicketsTable extends SupabaseTable<SupportTicketsRow> {
  /// Table Name
  @override
  String get tableName => 'support_tickets';

  /// Create a [SupportTicketsRow] from the [data] provided
  @override
  SupportTicketsRow createRow(Map<String, dynamic> data) =>
      SupportTicketsRow.fromJson(data);
}

/// Support Tickets Row
class SupportTicketsRow extends SupabaseDataRow {
  /// Support Tickets Row
  SupportTicketsRow({
    required String title,
    String? id,
    String? uid,
    String? description,
    TicketStatus? status,
    TicketPriority? priority,
    DateTime? createdAt,
    DateTime? updatedAt,
    SupportTicketCategory? category,
  }) : super({
         'title': supaSerialize(title),
         if (id != null) 'id': supaSerialize(id),
         if (uid != null) 'uid': supaSerialize(uid),
         if (description != null) 'description': supaSerialize(description),
         if (status != null) 'status': supaSerialize(status),
         if (priority != null) 'priority': supaSerialize(priority),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
         if (category != null) 'category': supaSerialize(category),
       });

  /// Support Tickets Row
  const SupportTicketsRow._(super.data);

  /// Create Support Tickets Row from a [data] map
  factory SupportTicketsRow.fromJson(Map<String, dynamic> data) =>
      SupportTicketsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => SupportTicketsTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField, defaultValue: '')!;
  set id(String value) => setField<String>(idField, value);

  /// Uid field name
  static const String uidField = 'uid';

  /// Uid
  String get uid => getField<String>(uidField, defaultValue: 'auth.')!;
  set uid(String value) => setField<String>(uidField, value);

  /// Title field name
  static const String titleField = 'title';

  /// Title
  String get title => getField<String>(titleField)!;
  set title(String value) => setField<String>(titleField, value);

  /// Description field name
  static const String descriptionField = 'description';

  /// Description
  String? get description => getField<String>(descriptionField);
  set description(String? value) => setField<String>(descriptionField, value);

  /// Status field name
  static const String statusField = 'status';

  /// Status
  TicketStatus get status =>
      getField<TicketStatus>(
        statusField,
        enumValues: TicketStatus.values,
        defaultValue: TicketStatus.open,
      )!;
  set status(TicketStatus value) => setField<TicketStatus>(statusField, value);

  /// Priority field name
  static const String priorityField = 'priority';

  /// Priority
  TicketPriority get priority =>
      getField<TicketPriority>(
        priorityField,
        enumValues: TicketPriority.values,
        defaultValue: TicketPriority.medium,
      )!;
  set priority(TicketPriority value) =>
      setField<TicketPriority>(priorityField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime get updatedAt =>
      getField<DateTime>(updatedAtField, defaultValue: DateTime.now())!;
  set updatedAt(DateTime value) => setField<DateTime>(updatedAtField, value);

  /// Category field name
  static const String categoryField = 'category';

  /// Category
  SupportTicketCategory? get category => getField<SupportTicketCategory>(
    categoryField,
    enumValues: SupportTicketCategory.values,
  );
  set category(SupportTicketCategory? value) =>
      setField<SupportTicketCategory>(categoryField, value);

  /// Make a copy of the current [SupportTicketsRow]
  /// overriding the provided fields
  SupportTicketsRow copyWith({
    String? title,
    String? id,
    String? uid,
    String? description,
    TicketStatus? status,
    TicketPriority? priority,
    DateTime? createdAt,
    DateTime? updatedAt,
    SupportTicketCategory? category,
  }) => SupportTicketsRow.fromJson({
    'title': supaSerialize(title) ?? data['title'],
    'id': supaSerialize(id) ?? data['id'],
    'uid': supaSerialize(uid) ?? data['uid'],
    'description': supaSerialize(description) ?? data['description'],
    'status': supaSerialize(status) ?? data['status'],
    'priority': supaSerialize(priority) ?? data['priority'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
    'category': supaSerialize(category) ?? data['category'],
  });
}

/// Date: 2025-08-08 19:06:35.346622
