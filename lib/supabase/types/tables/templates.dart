//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Templates Table
class TemplatesTable extends SupabaseTable<TemplatesRow> {
  /// Table Name
  @override
  String get tableName => 'templates';

  /// Create a [TemplatesRow] from the [data] provided
  @override
  TemplatesRow createRow(Map<String, dynamic> data) =>
      TemplatesRow.fromJson(data);
}

/// Templates Row
class TemplatesRow extends SupabaseDataRow {
  /// Templates Row
  TemplatesRow({
    String? id,
    String? uid,
    Map<String, dynamic>? json,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? description,
    bool? isPublic,
    String? html,
    String? subject,
    List<String>? attachments,
    String? categoryId,
    int? copiedCount,
    String? oldUid,
    TemplateUseCase? useCase,
    String? title,
  }) : super({
         if (id != null) 'id': supaSerialize(id),
         if (uid != null) 'uid': supaSerialize(uid),
         if (json != null) 'json': supaSerialize(json),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
         if (description != null) 'description': supaSerialize(description),
         if (isPublic != null) 'is_public': supaSerialize(isPublic),
         if (html != null) 'html': supaSerialize(html),
         if (subject != null) 'subject': supaSerialize(subject),
         if (attachments != null) 'attachments': supaSerialize(attachments),
         if (categoryId != null) 'category_id': supaSerialize(categoryId),
         if (copiedCount != null) 'copied_count': supaSerialize(copiedCount),
         if (oldUid != null) 'old_uid': supaSerialize(oldUid),
         if (useCase != null) 'use_case': supaSerialize(useCase),
         if (title != null) 'title': supaSerialize(title),
       });

  /// Templates Row
  const TemplatesRow._(super.data);

  /// Create Templates Row from a [data] map
  factory TemplatesRow.fromJson(Map<String, dynamic> data) =>
      TemplatesRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => TemplatesTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField, defaultValue: '')!;
  set id(String value) => setField<String>(idField, value);

  /// Uid field name
  static const String uidField = 'uid';

  /// Uid
  String get uid => getField<String>(uidField, defaultValue: 'auth.')!;
  set uid(String value) => setField<String>(uidField, value);

  /// Json field name
  static const String jsonField = 'json';

  /// Json
  Map<String, dynamic>? get json => getField<Map<String, dynamic>>(jsonField);
  set json(Map<String, dynamic>? value) =>
      setField<Map<String, dynamic>>(jsonField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime? get createdAt => getField<DateTime>(createdAtField);
  set createdAt(DateTime? value) => setField<DateTime>(createdAtField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime? get updatedAt => getField<DateTime>(updatedAtField);
  set updatedAt(DateTime? value) => setField<DateTime>(updatedAtField, value);

  /// Description field name
  static const String descriptionField = 'description';

  /// Description
  String? get description => getField<String>(descriptionField);
  set description(String? value) => setField<String>(descriptionField, value);

  /// Is Public field name
  static const String isPublicField = 'is_public';

  /// Is Public
  bool get isPublic => getField<bool>(isPublicField, defaultValue: false)!;
  set isPublic(bool value) => setField<bool>(isPublicField, value);

  /// Html field name
  static const String htmlField = 'html';

  /// Html
  String? get html => getField<String>(htmlField);
  set html(String? value) => setField<String>(htmlField, value);

  /// Subject field name
  static const String subjectField = 'subject';

  /// Subject
  String? get subject => getField<String>(subjectField);
  set subject(String? value) => setField<String>(subjectField, value);

  /// Attachments field name
  static const String attachmentsField = 'attachments';

  /// Attachments
  List<String> get attachments => getListField<String>(attachmentsField);
  set attachments(List<String>? value) =>
      setListField<String>(attachmentsField, value);

  /// Category Id field name
  static const String categoryIdField = 'category_id';

  /// Category Id
  String? get categoryId => getField<String>(categoryIdField);
  set categoryId(String? value) => setField<String>(categoryIdField, value);

  /// Copied Count field name
  static const String copiedCountField = 'copied_count';

  /// Copied Count
  int get copiedCount => getField<int>(copiedCountField, defaultValue: 0)!;
  set copiedCount(int value) => setField<int>(copiedCountField, value);

  /// Old Uid field name
  static const String oldUidField = 'old_uid';

  /// Old Uid
  String? get oldUid => getField<String>(oldUidField);
  set oldUid(String? value) => setField<String>(oldUidField, value);

  /// Use Case field name
  static const String useCaseField = 'use_case';

  /// Use Case
  TemplateUseCase? get useCase => getField<TemplateUseCase>(
    useCaseField,
    enumValues: TemplateUseCase.values,
  );
  set useCase(TemplateUseCase? value) =>
      setField<TemplateUseCase>(useCaseField, value);

  /// Title field name
  static const String titleField = 'title';

  /// Title
  String? get title => getField<String>(titleField);
  set title(String? value) => setField<String>(titleField, value);

  /// Make a copy of the current [TemplatesRow]
  /// overriding the provided fields
  TemplatesRow copyWith({
    String? id,
    String? uid,
    Map<String, dynamic>? json,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? description,
    bool? isPublic,
    String? html,
    String? subject,
    List<String>? attachments,
    String? categoryId,
    int? copiedCount,
    String? oldUid,
    TemplateUseCase? useCase,
    String? title,
  }) => TemplatesRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'uid': supaSerialize(uid) ?? data['uid'],
    'json': supaSerialize(json) ?? data['json'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
    'description': supaSerialize(description) ?? data['description'],
    'is_public': supaSerialize(isPublic) ?? data['is_public'],
    'html': supaSerialize(html) ?? data['html'],
    'subject': supaSerialize(subject) ?? data['subject'],
    'attachments': supaSerialize(attachments) ?? data['attachments'],
    'category_id': supaSerialize(categoryId) ?? data['category_id'],
    'copied_count': supaSerialize(copiedCount) ?? data['copied_count'],
    'old_uid': supaSerialize(oldUid) ?? data['old_uid'],
    'use_case': supaSerialize(useCase) ?? data['use_case'],
    'title': supaSerialize(title) ?? data['title'],
  });
}

/// Date: 2025-08-08 19:06:35.367240
