//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Users Table
class UsersTable extends SupabaseTable<UsersRow> {
  /// Table Name
  @override
  String get tableName => 'users';

  /// Create a [UsersRow] from the [data] provided
  @override
  UsersRow createRow(Map<String, dynamic> data) => UsersRow.fromJson(data);
}

/// Users Row
class UsersRow extends SupabaseDataRow {
  /// Users Row
  UsersRow({
    String? id,
    String? fullName,
    String? avatarUrl,
    Map<String, dynamic>? billingAddress,
    String? subscriptionId,
    DateTime? updatedAt,
    String? email,
    String? planId,
    bool? isAdmin,
    DateTime? createdAt,
    DateTime? deletedAt,
    String? settingsId,
    String? company,
    String? uid,
  }) : super({
         if (id != null) 'id': supaSerialize(id),
         if (fullName != null) 'full_name': supaSerialize(fullName),
         if (avatarUrl != null) 'avatar_url': supaSerialize(avatarUrl),
         if (billingAddress != null)
           'billing_address': supaSerialize(billingAddress),
         if (subscriptionId != null)
           'subscription_id': supaSerialize(subscriptionId),
         if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
         if (email != null) 'email': supaSerialize(email),
         if (planId != null) 'plan_id': supaSerialize(planId),
         if (isAdmin != null) 'is_admin': supaSerialize(isAdmin),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (deletedAt != null) 'deleted_at': supaSerialize(deletedAt),
         if (settingsId != null) 'settings_id': supaSerialize(settingsId),
         if (company != null) 'company': supaSerialize(company),
         if (uid != null) 'uid': supaSerialize(uid),
       });

  /// Users Row
  const UsersRow._(super.data);

  /// Create Users Row from a [data] map
  factory UsersRow.fromJson(Map<String, dynamic> data) =>
      UsersRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => UsersTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField, defaultValue: 'auth.')!;
  set id(String value) => setField<String>(idField, value);

  /// Full Name field name
  static const String fullNameField = 'full_name';

  /// Full Name
  String? get fullName => getField<String>(fullNameField);
  set fullName(String? value) => setField<String>(fullNameField, value);

  /// Avatar Url field name
  static const String avatarUrlField = 'avatar_url';

  /// Avatar Url
  String? get avatarUrl => getField<String>(avatarUrlField);
  set avatarUrl(String? value) => setField<String>(avatarUrlField, value);

  /// Billing Address field name
  static const String billingAddressField = 'billing_address';

  /// Billing Address
  Map<String, dynamic>? get billingAddress =>
      getField<Map<String, dynamic>>(billingAddressField);
  set billingAddress(Map<String, dynamic>? value) =>
      setField<Map<String, dynamic>>(billingAddressField, value);

  /// Subscription Id field name
  static const String subscriptionIdField = 'subscription_id';

  /// Subscription Id
  String? get subscriptionId => getField<String>(subscriptionIdField);
  set subscriptionId(String? value) =>
      setField<String>(subscriptionIdField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime? get updatedAt => getField<DateTime>(updatedAtField);
  set updatedAt(DateTime? value) => setField<DateTime>(updatedAtField, value);

  /// Email field name
  static const String emailField = 'email';

  /// Email
  String? get email => getField<String>(emailField);
  set email(String? value) => setField<String>(emailField, value);

  /// Plan Id field name
  static const String planIdField = 'plan_id';

  /// Plan Id
  String get planId =>
      getField<String>(planIdField, defaultValue: 'plan_free')!;
  set planId(String value) => setField<String>(planIdField, value);

  /// Is Admin field name
  static const String isAdminField = 'is_admin';

  /// Is Admin
  bool get isAdmin => getField<bool>(isAdminField, defaultValue: false)!;
  set isAdmin(bool value) => setField<bool>(isAdminField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime? get createdAt => getField<DateTime>(createdAtField);
  set createdAt(DateTime? value) => setField<DateTime>(createdAtField, value);

  /// Deleted At field name
  static const String deletedAtField = 'deleted_at';

  /// Deleted At
  DateTime? get deletedAt => getField<DateTime>(deletedAtField);
  set deletedAt(DateTime? value) => setField<DateTime>(deletedAtField, value);

  /// Settings Id field name
  static const String settingsIdField = 'settings_id';

  /// Settings Id
  String? get settingsId => getField<String>(settingsIdField);
  set settingsId(String? value) => setField<String>(settingsIdField, value);

  /// Company field name
  static const String companyField = 'company';

  /// Company
  String? get company => getField<String>(companyField);
  set company(String? value) => setField<String>(companyField, value);

  /// Uid field name
  static const String uidField = 'uid';

  /// Uid
  String? get uid => getField<String>(uidField);
  set uid(String? value) => setField<String>(uidField, value);

  /// Make a copy of the current [UsersRow]
  /// overriding the provided fields
  UsersRow copyWith({
    String? id,
    String? fullName,
    String? avatarUrl,
    Map<String, dynamic>? billingAddress,
    String? subscriptionId,
    DateTime? updatedAt,
    String? email,
    String? planId,
    bool? isAdmin,
    DateTime? createdAt,
    DateTime? deletedAt,
    String? settingsId,
    String? company,
    String? uid,
  }) => UsersRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'full_name': supaSerialize(fullName) ?? data['full_name'],
    'avatar_url': supaSerialize(avatarUrl) ?? data['avatar_url'],
    'billing_address': supaSerialize(billingAddress) ?? data['billing_address'],
    'subscription_id': supaSerialize(subscriptionId) ?? data['subscription_id'],
    'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
    'email': supaSerialize(email) ?? data['email'],
    'plan_id': supaSerialize(planId) ?? data['plan_id'],
    'is_admin': supaSerialize(isAdmin) ?? data['is_admin'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'deleted_at': supaSerialize(deletedAt) ?? data['deleted_at'],
    'settings_id': supaSerialize(settingsId) ?? data['settings_id'],
    'company': supaSerialize(company) ?? data['company'],
    'uid': supaSerialize(uid) ?? data['uid'],
  });
}

/// Date: 2025-08-08 19:06:35.384310
